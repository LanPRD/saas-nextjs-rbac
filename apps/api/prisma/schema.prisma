// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  passwordHash  String?   @map("password_hash")
  avatarUrl     String?   @map("avatar_url")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  tokens              Token[]
  accounts            Account[]
  invites             Invite[]
  member_on           Member[]
  owns_organizations  Organization[]
  owns_projects       Project[]

  @@map("users")
}

model Token {
  id        String    @id @default(uuid())
  type      String
  createdAt DateTime  @default(now()) @map("created_at")

  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")

  @@map("tokens")
}

model Account {
  id                String  @id @default(uuid())
  provider          String
  providerAccountId String  @unique @map("provider_account_id")

  user              User    @relation(fields: [userId], references: [id])
  userId            String  @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

model Invite {
  id              String        @id @default(uuid())
  email           String
  role            String
  createdAt       DateTime      @default(now()) @map("created_at")

  author          User?         @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")

  organization    Organization  @relation(fields: [organizationId], references: [id])
  organizationId  String        @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id              String        @id @default(uuid())
  role            String        @default("MEMBER")

  organization    Organization  @relation(fields: [organizationId], references: [id])
  organizationId  String        @map("organization_id")

  user            User          @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String    @id @default(uuid())
  name                      String
  slug                      String    @unique
  domain                    String?   @unique
  shouldAttachUserByDomain  Boolean   @default(false) @map("should_attach_user_by_domain")
  avatarUrl                 String?   @unique @map("avatar_url")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")

  owner     User    @relation(fields: [ownerId], references: [id])
  ownerId   String  @map("user_id")

  invites   Invite[]
  members   Member[]
  projects  Project[]

  @@map("organizations")
}

model Project {
  id                        String    @id @default(uuid())
  name                      String
  description               String
  slug                      String    @unique
  avatarUrl                 String    @unique @map("avatar_url")
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @updatedAt @map("updated_at")

  organization    Organization    @relation(fields: [organizationId], references: [id])
  organizationId  String          @map("organization_id")

  owner     User    @relation(fields: [ownerId], references: [id])
  ownerId   String  @map("owner_id")

  @@map("projects")
}